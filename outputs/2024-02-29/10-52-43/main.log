[2024-02-29 10:52:53,201][flwr][WARNING] - Both server and strategy were provided, ignoring strategy
[2024-02-29 10:52:53,208][flwr][INFO] - Starting Flower simulation, config: ServerConfig(num_rounds=1, round_timeout=None)
[2024-02-29 10:53:00,091][flwr][INFO] - Flower VCE: Ray initialized with resources: {'CPU': 4.0, 'node:127.0.0.1': 1.0, 'object_store_memory': 1345576550.0, 'memory': 2691153102.0, 'node:__internal_head__': 1.0}
[2024-02-29 10:53:00,096][flwr][INFO] - Optimize your simulation with Flower VCE: https://flower.dev/docs/framework/how-to-run-simulations.html
[2024-02-29 10:53:00,096][flwr][INFO] - Flower VCE: Resources for each Virtual Client: {'num_cpus': 4, 'num_gpus': 0.0}
[2024-02-29 10:53:00,108][flwr][INFO] - Flower VCE: Creating VirtualClientEngineActorPool with 1 actors
[2024-02-29 10:53:00,109][flwr][INFO] - Initializing global parameters
[2024-02-29 10:53:00,111][flwr][INFO] - Requesting initial parameters from one random client
[2024-02-29 10:53:07,811][flwr][INFO] - Received initial parameters from one random client
[2024-02-29 10:53:07,811][flwr][INFO] - Evaluating initial parameters
[2024-02-29 10:53:08,068][flwr][ERROR] - Error(s) in loading state_dict for ResNet18:
	size mismatch for resnet.layer1.0.conv1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([64, 64, 3, 3]).
	size mismatch for resnet.layer1.0.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for resnet.layer1.1.conv1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([64, 64, 3, 3]).
	size mismatch for resnet.layer1.1.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for resnet.layer2.0.conv1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128, 64, 3, 3]).
	size mismatch for resnet.layer2.0.bn1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.conv2.weight: copying a param with shape torch.Size([64, 64, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 128, 3, 3]).
	size mismatch for resnet.layer2.0.bn2.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.bn2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.downsample.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128, 64, 1, 1]).
	size mismatch for resnet.layer2.0.downsample.1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.downsample.1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.1.conv1.weight: copying a param with shape torch.Size([64, 64, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 128, 3, 3]).
	size mismatch for resnet.layer2.1.bn1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.1.bn1.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.1.conv2.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128, 128, 3, 3]).
	size mismatch for resnet.layer2.1.bn2.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.1.bn2.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer3.0.conv1.weight: copying a param with shape torch.Size([128, 64, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 128, 3, 3]).
	size mismatch for resnet.layer3.0.bn1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.bn1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.conv2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
	size mismatch for resnet.layer3.0.bn2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.bn2.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.downsample.0.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
	size mismatch for resnet.layer3.0.downsample.1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.downsample.1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.1.conv1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
	size mismatch for resnet.layer3.1.bn1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.1.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.1.conv2.weight: copying a param with shape torch.Size([128, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
	size mismatch for resnet.layer3.1.bn2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.1.bn2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer4.0.conv1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512, 256, 3, 3]).
	size mismatch for resnet.layer4.0.bn1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.conv2.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 512, 3, 3]).
	size mismatch for resnet.layer4.0.bn2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.bn2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.downsample.0.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512, 256, 1, 1]).
	size mismatch for resnet.layer4.0.downsample.1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.downsample.1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.1.conv1.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 512, 3, 3]).
	size mismatch for resnet.layer4.1.bn1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.1.bn1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.1.conv2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512, 512, 3, 3]).
	size mismatch for resnet.layer4.1.bn2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.1.bn2.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.fc.weight: copying a param with shape torch.Size([256, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([4, 512]).
	size mismatch for resnet.fc.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([4]).
[2024-02-29 10:53:08,087][flwr][ERROR] - Traceback (most recent call last):
  File "C:\Users\Stavros\miniconda3\envs\pyt_pg\Lib\site-packages\flwr\simulation\app.py", line 308, in start_simulation
    hist = run_fl(
           ^^^^^^^
  File "C:\Users\Stavros\miniconda3\envs\pyt_pg\Lib\site-packages\flwr\server\app.py", line 225, in run_fl
    hist = server.fit(num_rounds=config.num_rounds, timeout=config.round_timeout)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Stavros\miniconda3\envs\pyt_pg\Lib\site-packages\flwr\server\server.py", line 92, in fit
    res = self.strategy.evaluate(0, parameters=self.parameters)
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Stavros\miniconda3\envs\pyt_pg\Lib\site-packages\flwr\server\strategy\fedavg.py", line 165, in evaluate
    eval_res = self.evaluate_fn(server_round, parameters_ndarrays, {})
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "C:\Users\Stavros\Desktop\PythonProjects\FlowerYtTut\strategy.py", line 72, in evaluate_fn
    model.load_state_dict(state_dict, strict=False)
  File "C:\Users\Stavros\miniconda3\envs\pyt_pg\Lib\site-packages\torch\nn\modules\module.py", line 2152, in load_state_dict
    raise RuntimeError('Error(s) in loading state_dict for {}:\n\t{}'.format(
RuntimeError: Error(s) in loading state_dict for ResNet18:
	size mismatch for resnet.layer1.0.conv1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([64, 64, 3, 3]).
	size mismatch for resnet.layer1.0.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for resnet.layer1.1.conv1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([64, 64, 3, 3]).
	size mismatch for resnet.layer1.1.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([64]).
	size mismatch for resnet.layer2.0.conv1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128, 64, 3, 3]).
	size mismatch for resnet.layer2.0.bn1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.conv2.weight: copying a param with shape torch.Size([64, 64, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 128, 3, 3]).
	size mismatch for resnet.layer2.0.bn2.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.bn2.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.downsample.0.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128, 64, 1, 1]).
	size mismatch for resnet.layer2.0.downsample.1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.0.downsample.1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.1.conv1.weight: copying a param with shape torch.Size([64, 64, 3, 3]) from checkpoint, the shape in current model is torch.Size([128, 128, 3, 3]).
	size mismatch for resnet.layer2.1.bn1.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.1.bn1.bias: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.1.conv2.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128, 128, 3, 3]).
	size mismatch for resnet.layer2.1.bn2.weight: copying a param with shape torch.Size([64]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer2.1.bn2.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([128]).
	size mismatch for resnet.layer3.0.conv1.weight: copying a param with shape torch.Size([128, 64, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 128, 3, 3]).
	size mismatch for resnet.layer3.0.bn1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.bn1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.conv2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
	size mismatch for resnet.layer3.0.bn2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.bn2.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.downsample.0.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([256, 128, 1, 1]).
	size mismatch for resnet.layer3.0.downsample.1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.0.downsample.1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.1.conv1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
	size mismatch for resnet.layer3.1.bn1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.1.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.1.conv2.weight: copying a param with shape torch.Size([128, 64, 1, 1]) from checkpoint, the shape in current model is torch.Size([256, 256, 3, 3]).
	size mismatch for resnet.layer3.1.bn2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer3.1.bn2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([256]).
	size mismatch for resnet.layer4.0.conv1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512, 256, 3, 3]).
	size mismatch for resnet.layer4.0.bn1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.bn1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.conv2.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 512, 3, 3]).
	size mismatch for resnet.layer4.0.bn2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.bn2.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.downsample.0.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512, 256, 1, 1]).
	size mismatch for resnet.layer4.0.downsample.1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.0.downsample.1.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.1.conv1.weight: copying a param with shape torch.Size([128, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([512, 512, 3, 3]).
	size mismatch for resnet.layer4.1.bn1.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.1.bn1.bias: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.1.conv2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512, 512, 3, 3]).
	size mismatch for resnet.layer4.1.bn2.weight: copying a param with shape torch.Size([128]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.layer4.1.bn2.bias: copying a param with shape torch.Size([]) from checkpoint, the shape in current model is torch.Size([512]).
	size mismatch for resnet.fc.weight: copying a param with shape torch.Size([256, 128, 3, 3]) from checkpoint, the shape in current model is torch.Size([4, 512]).
	size mismatch for resnet.fc.bias: copying a param with shape torch.Size([256]) from checkpoint, the shape in current model is torch.Size([4]).

[2024-02-29 10:53:08,106][flwr][ERROR] - Your simulation crashed :(. This could be because of several reasons. The most common are: 
	 > Sometimes, issues in the simulation code itself can cause crashes. It's always a good idea to double-check your code for any potential bugs or inconsistencies that might be contributing to the problem. For example: 
		 - You might be using a class attribute in your clients that hasn't been defined.
		 - There could be an incorrect method call to a 3rd party library (e.g., PyTorch).
		 - The return types of methods in your clients/strategies might be incorrect.
	 > Your system couldn't fit a single VirtualClient: try lowering `client_resources`.
	 > All the actors in your pool crashed. This could be because: 
		 - You clients hit an out-of-memory (OOM) error and actors couldn't recover from it. Try launching your simulation with more generous `client_resources` setting (i.e. it seems {'num_cpus': 4, 'num_gpus': 0.0} is not enough for your run). Use fewer concurrent actors. 
		 - You were running a multi-node simulation and all worker nodes disconnected. The head node might still be alive but cannot accommodate any actor with resources: {'num_cpus': 4, 'num_gpus': 0.0}.
Take a look at the Flower simulation examples for guidance <https://flower.dev/docs/framework/how-to-run-simulations.html>.
